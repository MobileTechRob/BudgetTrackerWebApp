@using BudgetAPI.Models

@{
    ViewData["Title"] = "Year To Date Monthly Transaction Summary";
}

<h2>Year To Date Monthly Transaction Summary</h2>
<style>
    .container {
        display: flex;
        gap: 20px; /* Space between divs */
    }

    .item {
        flex: 1; /* Equal width */
        /* Add your styling here */
    }

    table tr:nth-child(even) {
        color: #333333; /* Dark gray for even rows */
    }

    table tr:nth-child(odd) {
        color: #0074d9; /* Blue for odd rows */
    }

    table th_center {
        text-align: center;
    }

    table th {
        background-color: beige;
        color: #000000;
        font-weight: bold;
    }

</style>

<form id="myForm">
    <select id="selectYear" name="selectYear" onchange="onyearchanged()">         
    </select>
</form>

<body style="background-color: beige;">
    <table id="tableYearToDate">
        <thead id="header-row-1">
            <tr>
                <th>Month Start</th>
                <th>&nbsp;&nbsp;&nbsp;</th>
                <th>Month End</th>
                <th>&nbsp;&nbsp;&nbsp;</th>
                <th>Cost Total</th>
                <th>&nbsp;&nbsp;&nbsp;</th>                
                <th>Savings Total</th>                
            </tr>
        </thead>
        <tbody id="bodyForDateCostAndSavings">
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.StartDte</td>
                    <th>&nbsp;&nbsp;&nbsp;</th>
                    <td>@item.EndDte</td>
                    <th>&nbsp;&nbsp;&nbsp;</th>
                    <td>@item.CostTotal</td>
                    <th>&nbsp;&nbsp;&nbsp;</th>
                    <td>@item.SavingsTotal</td>
                </tr>
            }
        </tbody>    
    </table>

    <table id="tableYearToDate_UserSelectedEarlierDate">
        <thead id="header-row-2">
            <tr>
                <th>Month Start</th>
                <th>&nbsp;&nbsp;&nbsp;</th>
                <th>Month End</th>
                <th>&nbsp;&nbsp;&nbsp;</th>
                <th>Cost Total</th>
                <th>&nbsp;&nbsp;&nbsp;</th>
                <th>Savings Total</th>
            </tr>
        </thead>
        <tbody id="bodyForDateCostAndSavingsfromUserSelectingDates">
        </tbody>
    </table>
</body>

<script>
    window.onload = function () {
        console.log("window.onload called");

            const defaultYearTable = document.getElementById("tableYearToDate");
            const userSelectedYearTable = document.getElementById("tableYearToDate_UserSelectedEarlierDate");

            defaultYearTable.style.display = "table"; // Hide the user selected year table
            userSelectedYearTable.style.display = "none";

            const queryStrTransactionYears = `/HomeBudget/TransactionYears`;

            console.log("queryStr is " , queryStrTransactionYears);

               fetch(queryStrTransactionYears)
               .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(transactionYears => {
                    // Process the data as needed
                    // For example, you can call a function to update the UI with the fetched data
                    renderTransactionYears(transactionYears);
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });

    };

    function renderTransactionYears(transactionYears)
    {
        console.log("renderTransactionYears ");
        const selectElement = document.getElementById("selectYear");

        console.log("window.onload selectElement is " , selectElement.value);

        transactionYears.forEach(year => {
            console.log("transaction Year is ", year);

            const newOption = document.createElement('option');

            newOption.value = year;
            newOption.textContent = year;           
            selectElement.appendChild(newOption);
        });

    }

    function onyearchanged()
    {
        console.log("onyearchanged called")
        
        const year = document.getElementById("selectYear");

        console.log("selected year is ", year.value);    

        const defaultYearTable = document.getElementById("tableYearToDate");
        const userSelectedYearTable = document.getElementById("tableYearToDate_UserSelectedEarlierDate");
        
        defaultYearTable.style.display = "none"; // Hide the user selected year table
        userSelectedYearTable.style.display = "table";
        
        console.log("defaultYearTable.style.display" , defaultYearTable.style.display);
        console.log("userSelectedYearTable.style.display" , userSelectedYearTable.style.display);
        
        const queryStr = `/HomeBudget/GetYTDAndForward?startYear=${year.value}`;

        console.log("query str ", queryStr);

        fetch (queryStr)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log("data is ", data);
                renderMonthlyTransactionSummary(data);
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });

    }

    function renderMonthlyTransactionSummary(spendingHistory)
    {
           console.log("renderImportTransactionHistory ", spendingHistory);
           console.log("importTransactionHistory line is ", spendingHistory);

           const tbody = document.getElementById('bodyForDateCostAndSavingsfromUserSelectingDates');

           if (tbody != null) 
           {
                  console.log("tbody is not null, clearing old rows");

                  tbody.innerHTML = ''; // Clear any old rows

                  spendingHistory.forEach(spendingMonth =>
                  {                      
                      console.log("importHistory ", spendingMonth);
                      var [startDate, timePart] = spendingMonth.startDate.split('T');

                      console.log ("startDate ", startDate);
                      var [endDate, timePart] = spendingMonth.endDate.split('T');

                      console.log ("endDate" , endDate);

                      var costTotal = spendingMonth.costTotal;
                      var savingsTotal = spendingMonth.savingsTotal;

                      console.log("costTotal is ", costTotal);
                      console.log("savingsTotal is ", savingsTotal);
                   
                       const row = document.createElement('tr');
                       row.innerHTML = `<td>${startDate}</td>
                                        <td>&nbsp;&nbsp;&nbsp;</td>
                                        <td>${endDate}</td>
                                        <td>&nbsp;&nbsp;&nbsp;</td>                                        
                                        <td>${costTotal}</td>
                                        <td>&nbsp;&nbsp;&nbsp;</td>                                        
                                        <td>${savingsTotal}</td>
                                        <td>&nbsp;&nbsp;&nbsp;</td>`;                                       

                       tbody.appendChild(row);                       
                  });
           }
           else
           {
                console.log("tbody is null, cannot render import history");
           } 
    }

</script>
