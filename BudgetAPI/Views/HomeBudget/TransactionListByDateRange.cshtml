@{
    ViewData["Title"] = "List Page";
}

<div class="text-center">
        <h2>Transaction List</h2>
</div>


<form id="myForm">
@*     <input type="text" id="name" placeholder="Name" required />
    <input type="number" id="price" placeholder="Price" required />
 *@
    <table>
        <tr>
            <td>
                <select name="month" id="month" onchange="onmonthchangehandler()">
                    <option value="00">Select Month</option>
                    <option value="01">January</option>
                    <option value="02">February</option>
                    <option value="03">March</option>
                    <option value="04">April</option>
                    <option value="05">May</option>
                    <option value="06">June</option>
                    <option value="07">July</option>
                    <option value="08">August</option>
                    <option value="09">September</option>
                    <option value="10">October</option>
                    <option value="11">November</option>
                    <option value="12">December</option>
                </select>
            </td>
            <td>&nbsp;&nbsp;&nbsp;</td>
            <td>
                <input type="date" id="fromDate" placeholder="From Date" />
            </td>
            <td>
                <input type="date" id="toDate" placeholder="To Date" />
            </td>
            <td>
                <button type="submit">Get Transactions</button>
            </td>
        </tr>
    </table>   
</form>

<div id="status"></div>

<script>

    window.onload = function () {
        console.log("window.onload called");        
        console.log("document.getElementById(fromDate) " , document.getElementById("fromDate"));
        console.log("document.getElementById(toDate) " , document.getElementById("toDate"));

        const now = new Date();
        const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1).toISOString().slice(0, 10); // "YYYY-MM-DD" format;
        //const firstDayOfMonthAsString = firstDayOfMonth.toISOString().slice(0, 10); // "YYYY-MM-DD" format
        const todayDate = new Date().toISOString().slice(0, 10);

        console.log("First Day Of Month " +  firstDayOfMonth);
        console.log("Todays Date " +  todayDate);

        document.getElementById("fromDate").value = firstDayOfMonth;
        document.getElementById("toDate").value = todayDate;
    };  


    function onmonthchangehandler() {
        console.log("onmonthchangehandler called");
        const month = document.getElementById("month").value;
        console.log("Selected month is " + month);
        if (month != "00") {
            document.getElementById("fromDate").disabled = true;
            document.getElementById("toDate").disabled = true;
        }
        else
        {
            document.getElementById("fromDate").disabled = false;
            document.getElementById("toDate").disabled = false;
        }
    };

    document.getElementById("myForm").addEventListener("submit", function (e) {
        e.preventDefault(); // Prevent default form submission

        console.log("document.getElementById(month) " , document.getElementById("month").value);
        console.log("from date from input control [" + document.getElementById("fromDate").value + "]");
        console.log("to date from input control [" + document.getElementById("toDate").value + "]");

        var startDate = null;
        var endDate = null;

        const month = document.getElementById("month").value;

        if (month == "00") 
        {
            console.log("month is not 0, so using month value");
            if ((document.getElementById("toDate").value != "") && (document.getElementById("fromDate").value != ""))
            {   
                const fromDate = new Date(document.getElementById("fromDate").value);
                const toDate = new Date(document.getElementById("toDate").value);

                console.log("from date is " + fromDate);
                console.log("to date is " + toDate);

                startDate = encodeURIComponent(fromDate.toISOString()).slice(0, 10);
                endDate = encodeURIComponent(toDate.toISOString()).slice(0, 10);

                console.log("start date is " + startDate);
                console.log("end date is " + endDate);
            }
        }
        else if (month >= "01")
        {
            startDate = "2025-" + month + "-01"; // Start of the month

            console.log("month  is " , month);
            console.log("parseInt(month) " , parseInt(month));

            const now = new Date();
            const lastDayOfMonth = lastday(now.getFullYear(), parseInt(month)); // "YYYY-MM-DD" format;
           
            endDate = "2025-" + month + "-" + lastDayOfMonth;

            console.log("startDate is " + startDate);
            console.log("endDate is " + endDate);
        }

        const queryStr = `http://localhost:5065/HomeBudget/CostListByDateRange?fromDate=${startDate}&toDate=${endDate}`;

        console.log("queryStr is " + queryStr);

        fetch(queryStr)
        .then(response => {
            if (!response.ok) throw new Error("Failed to retrieve ");
            return response.json();
        })
        .then(tranactionList => {           
            renderList(tranactionList);
        })
        .catch(error => {
            document.getElementById("status").textContent = "Error: " + error.message;
        });

        const summaryQueryStr = `/HomeBudget/TransactionDollarsByCategory?fromDate=${startDate}&toDate=${endDate}`;

        console.log("summaryQueryStr is " + summaryQueryStr);

        fetch(summaryQueryStr)
        .then(response => {
            if (!response.ok) throw new Error("Failed to retrieve ");
            return response.json();
        })
        .then(transactionList => {
            console.log("TransactionDollarsByCategory " ,transactionList);
            renderSummaryByCategory(transactionList);
        })
        .catch(error => {
            document.getElementById("status").textContent = "Error: " + error.message;
        });
    });

    function lastday(year, month) 
    {
        // Create a date object for the first day of the next month
        return new Date(year, month, 0).getDate();        
    }


    function renderList(transactionList) {
      const tbody = document.getElementById('costTableBody');
      tbody.innerHTML = ''; // Clear any old rows

      transactionList.forEach(transaction => {
        const row = document.createElement('tr');

        row.innerHTML = `<td>${transaction.posted_Date}</td><td>&nbsp;&nbsp;</td>
          <td>${transaction.costCategory}</td><td>&nbsp;&nbsp;</td>
          <td>${transaction.savingsCategory}</td><td>&nbsp;&nbsp;</td>
          <td>${transaction.description}</td><td>&nbsp;&nbsp;</td>
          <td>${transaction.amount}</td>`
        tbody.appendChild(row);
      });
    }


    function renderSummaryByCategory(transactionList) {

      console.log('renderSummaryByCategory Start Date:', transactionList.StartDate);
      console.log('renderSummaryByCategory End Date:', transactionList.EndDate);
      
      console.log('renderSummaryByCategory cost Total:', transactionList.costTotal);
      console.log('renderSummaryByCategory savings Total:', transactionList.savingsTotal);

      console.log('renderSummaryByCategory Cost Transactions:', transactionList.listOfCostTransactionDollarsByCategory);
      console.log('renderSummaryByCategory Savings Transactions:', transactionList.listOfSavingsTransactionDollarsByCategory);

      var costList = transactionList.listOfCostTransactionDollarsByCategory;
      var savingsList = transactionList.listOfSavingsTransactionDollarsByCategory;

      var costTotal = transactionList.costTotal;
      var SavingsTotal = transactionList.savingsTotal;

      const tbody = document.getElementById('costSummaryByCategory');
      tbody.innerHTML = ''; // Clear any old rows

      costList.forEach(cost => {
        const row = document.createElement('tr');

        row.innerHTML = `<td>${cost.categoryName}</td><td>&nbsp;&nbsp;</td><td>${cost.totalAmount}</td><td>&nbsp;&nbsp;</td>`

        tbody.appendChild(row);
      });

      const rowspace = document.createElement('tr');
      rowspace.innerHTML = `<td>&nbsp;&nbsp;</td><td>&nbsp;&nbsp;</td><td>&nbsp;&nbsp;</td><td>&nbsp;&nbsp;</td>`
      tbody.appendChild(rowspace);

      const row = document.createElement('tr');
      row.innerHTML = `<td>Cost Total</td><td>&nbsp;&nbsp;</td><td>${costTotal}</td><td>&nbsp;&nbsp;</td>`
      tbody.appendChild(row);

      const tbodySavings = document.getElementById('savingsSummaryByCategory');
      tbodySavings.innerHTML = ''; // Clear any old rows
      
      savingsList.forEach(savings => {
        const row = document.createElement('tr');
        row.innerHTML = `<td>${savings.categoryName}</td><td>&nbsp;&nbsp;</td><td>${savings.totalAmount}</td><td>&nbsp;&nbsp;</td>`
        tbodySavings.appendChild(row);
      });

      tbodySavings.appendChild(rowspace);

      const savingsRow = document.createElement('tr');
      savingsRow.innerHTML = `<td>Savings Total</td><td>&nbsp;&nbsp;</td><td>${SavingsTotal}</td><td>&nbsp;&nbsp;</td>`
      tbodySavings.appendChild(savingsRow);
    }

</script>

<body style="background-color: beige;">
    <table id="summaryOfCostsByCategory">
        <thead>
            <tr><td style="font-weight: bold">Cost Summary By Category</td></tr>
            <tr><th>Category</th><th>&nbsp;&nbsp;</th><th>Amount</th></tr>
        </thead>
        <tbody id="costSummaryByCategory"></tbody>
    </table>

    <table id="summaryOfSavingsByCategory">
        <thead>
            <tr><td style="font-weight: bold">Savings Summary By Category</td></tr>
            <tr><th>Category</th><th>&nbsp;&nbsp;</th><th>Amount</th></tr>
        </thead>
        <tbody id="savingsSummaryByCategory"></tbody>
    </table>

    <table id="costTable">
        <thead>
            <tr><td style="font-weight: bold">Tranaction List</td></tr>
            <tr><th>Date</th><th>&nbsp;&nbsp;</th><th>Cost Category</th><th>&nbsp;&nbsp;</th><th>Savings Category</th><th>&nbsp;&nbsp;</th><th>Description</th><th>&nbsp;&nbsp;</th><th>Amount</th></tr>
        </thead>
        <tbody id="costTableBody"></tbody>
    </table>
</body>
